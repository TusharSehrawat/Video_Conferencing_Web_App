//intialise express
const express = require('express');
//intialise app with express
const app = express();
//link server and app
const server = require('http').Server(app);

//socket io
const io = require('socket.io')(server)

//import uuid library version 4
const {v4: uuidv4}=require('uuid');

//Express working together with peeJS
const {ExpressPeerServer}=require('peer');
const peerServer= ExpressPeerServer(server,{
    debug: true
});

app.set('view engine','ejs');
app.use(express.static('public'));

//  '/' denotes root where our url hits
//ES6 function
app.use('/peerjs',peerServer);

app.get('/',(req,res)=>{
    //viewfile to render
    //redirects local host to unique id generated by uuid function
    res.redirect(`/${uuidv4()}`);
})

                    //request,response
app.get('/:room',(req,res)=>{
    res.render('room',{roomId: req.params.room});
})


io.on('connection', socket => {
    //when room is joined
    socket.on('join-room',(roomId,userId)=>{
        socket.join(roomId);
        //if any user joins it is broadcasted to everyone
        socket.to(roomId).emit('user-connected',userId);
        //receive message from front end chat
        socket.on('message',message=>{
            //send the received chat message back to front end
            io.to(roomId).emit('createMessage',message)
        })
    })
})

//local host with port 3030
server.listen(process.env.PORT||3030);